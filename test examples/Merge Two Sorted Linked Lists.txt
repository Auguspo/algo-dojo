Problem Statement:
You're given the pointer to the head nodes of two sorted linked lists. The data in both lists will be sorted in ascending order. Change the next pointers to obtain a single, merged linked list which also has data in ascending order. Either head pointer given may be null meaning that the corresponding list is empty.

Function Description:
Complete the function mergeLists in the editor below. It must return a pointer to the head of the merged linked list.

mergeLists has the following parameters:

head1: a pointer to the head of a linked list or null.
head2: a pointer to the head of a linked list or null.
Constraints:
1 <= |list data| <= 10^3
Output Format:
Change the next pointer of individual nodes so that nodes from both lists are merged into a single list. Then return the head of this merged list.

Sample Input:
rust
Copy code
1 --> 3 --> 5 --> 6 --> NULL
2 --> 4 --> 7 --> NULL
Sample Output:
rust
Copy code
1 --> 2 --> 3 --> 4 --> 5 --> 6 --> 7 --> NULL
Explanation:
The main point here is to merge two sorted linked lists into a single sorted linked list.


'use strict';

const fs = require('fs');

process.stdin.resume();
process.stdin.setEncoding('utf-8');

let inputString = '';
let currentLine = 0;

process.stdin.on('data', inputStdin => {
    inputString += inputStdin;
});

process.stdin.on('end', _ => {
    inputString = inputString.replace(/\s*$/, '')
        .split('\n')
        .map(str => str.replace(/\s*$/, ''));

    main();
});

function readLine() {
    return inputString[currentLine++];
}

const SinglyLinkedListNode = class {
    constructor(nodeData) {
        this.data = nodeData;
        this.next = null;
    }
};

const SinglyLinkedList = class {
    constructor() {
        this.head = null;
        this.tail = null;
    }

    insertNode(nodeData) {
        const node = new SinglyLinkedListNode(nodeData);

        if (this.head == null) {
            this.head = node;
        } else {
            this.tail.next = node;
        }

        this.tail = node;
    }
};

function printSinglyLinkedList(node, sep, ws) {
    while (node != null) {
        ws.write(String(node.data));

        node = node.next;

        if (node != null) {
            ws.write(sep);
        }
    }
}

// Complete the mergeLists function below.

/*
 * For your reference:
 *
 * SinglyLinkedListNode {
 *     int data;
 *     SinglyLinkedListNode next;
 * }
 *
 */
function mergeLists(head1, head2) {
    let arr = []
    let head = head1
    while(head !== null){
        arr.push(head.data)
        head = head.next
    }
    
    head = head2
    while(head !== null){
        arr.push(head.data)
        head = head.next
    }
    
    arr.sort((a, b) => b - a);
    head = new SinglyLinkedListNode(arr[0])
    
    for(let i = 1;i < arr.length;i++){
        let node = new SinglyLinkedListNode(arr[i])
        console.log(head);
        if(head == null){
            head = node
        }else{
            node.next = head
            head = node
        }
    }
    return head
}

function main() {
    const ws = fs.createWriteStream(process.env.OUTPUT_PATH);

    const tests = parseInt(readLine(), 10);

    for (let testsItr = 0; testsItr < tests; testsItr++) {
        const llist1Count = parseInt(readLine(), 10);

        let llist1 = new SinglyLinkedList();

        for (let i = 0; i < llist1Count; i++) {
            const llist1Item = parseInt(readLine(), 10);
            llist1.insertNode(llist1Item);
        }
      
      	const llist2Count = parseInt(readLine(), 10);

        let llist2 = new SinglyLinkedList();

        for (let i = 0; i < llist2Count; i++) {
            const llist2Item = parseInt(readLine(), 10);
            llist2.insertNode(llist2Item);
        }

        let llist3 = mergeLists(llist1.head, llist2.head);

        printSinglyLinkedList(llist3, " ", ws)
        ws.write("\n");
    }

    ws.end();
}
